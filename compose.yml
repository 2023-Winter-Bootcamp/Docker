version: '3'

services:
  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - 80:80
      - 443:443
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./static:/usr/share/nginx/html
    depends_on:
      - backend
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - mynetwork

  backend:
    container_name: backend
    build: ./Backend
    restart: always
    command: sh -c "python manage.py makemigrations && python manage.py migrate && test -d static || mkdir static && python manage.py collectstatic --noinput && gunicorn 'giterview.wsgi:application' --bind=0.0.0.0:8000 --reload"
    ports:
      - 8000:8000
    env_file:
      - ./.env
    networks:
      - mynetwork
    volumes:
      - ./Backend:/usr/src/app

  node_exporter:
    container_name: node_exporter
    image: prom/node-exporter:latest
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - "9100:9100"
    networks:
      - mynetwork
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    user: root
    ports:
      - 9090:9090
    volumes:
      - ./monitor/prometheus/config/:/etc/prometheus/
      - ./monitor/prometheus/volume:/prometheus
    command:
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always
    depends_on:
      - backend
      - node_exporter
    networks:
      - mynetwork

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    volumes:
      - ./monitor/grafana:/var/lib/grafana
    restart: always
    networks:
      - mynetwork

  mysql:
    container_name: mysql
    image: mysql:latest
    env_file:
      - ./.env
    networks:
      - mynetwork
    ports:
      - 3306:3306

networks:
  mynetwork:
    driver: bridge